# This file parses the raw data that is generated by the 'tls_generator.py' and builds  a probability markov chain
# It generates the markovgraph.dot file, which can be used for visulization of the results(automated here in the script) 


tls_record_types = ["state_start","change_cipher_spec","application_data","alert","hello_request","client_hello","server_hello","certificate","server_hello_done","server_key_exchange","client_key_exchange","finished","certificate_request","certificate_verify","state_end"]

# To store the sequence
sequence = []
with open("raw_tls.txt") as f:
    text = f.readlines()

for line in text:
	# if "content_type= 50" in line: # A bad fix for the broken lib
	# 		# broken_field = line.split()
	# 		# if(broken_field[2].isdigit() == True):
	# 		sequence.append("certificate")
	# 		# sequence.append("server_hello_done")
	# 		continue
	for record_type in tls_record_types:
		# if(record_type in line):
		# 	sequence.append(record_type)
		# 	break
		if("content_type= "+record_type in line or "type      = "+record_type in line):
			sequence.append(record_type)
			break
print sequence

row = 15
col = 15
prob_matrix = [[0 for x in range(row)] for y in range(row)] 



prev_state = -1
start = tls_record_types.index("state_start")
end = tls_record_types.index("state_end")

for state in sequence:
	curr_state = tls_record_types.index(state)
	if(state == "client_hello"): # Started again
		if(prev_state == -1):
			prob_matrix[start][curr_state] = prob_matrix[start][curr_state] +1
		else:
			prob_matrix[prev_state][end] = prob_matrix[prev_state][end] + 1
			prob_matrix[start][curr_state] = prob_matrix[start][curr_state] +1
		prev_state = curr_state
		continue

	prob_matrix[prev_state][curr_state] = prob_matrix[prev_state][curr_state] +1
	prev_state = curr_state



for i in range(0,row):
	sum = 0
	for j in range(0,col):
		# print (prob_matrix[i][j]),
		sum = sum + prob_matrix[i][j]
	if(sum != 0):
		for j in range(0,col):
			prob_matrix[i][j] = float(prob_matrix[i][j]) / float(sum)
	else:
		for j in range(0,col):
			prob_matrix[i][j] = 0.0

# for i in range(0,row):
# 	for j in range(0,col):
# 		print (prob_matrix[i][j]),
# 	print

graph_handler = open("markovgraph.dot","w")
graph_handler.write("digraph {\n")

for i in range(0,row):
	for j in range(0,col):
		# print (prob_matrix[i][j]),
		if(prob_matrix[i][j] != 0):
			op = tls_record_types[i]+ "->" + tls_record_types[j] + "[label=\"" + str(prob_matrix[i][j]) + "\"];\n"
			graph_handler.write(op)
graph_handler.write("}")
graph_handler.close()